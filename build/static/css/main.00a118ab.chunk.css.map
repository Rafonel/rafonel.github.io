{"version":3,"sources":["main.00a118ab.chunk.css","style/_utilities.scss","style/_base.scss","style/_font.sass","style/_root.sass","style/_c-menu.sass","style/_c-section.sass","style/_c-secPerfil.sass","style/_c-img-about.sass","style/_c-info.sass","App.sass","style/_c-expCard.sass","style/_c-divider.sass","style/_mixins.scss","style/include-media.scss","style/_responsivity.sass"],"names":[],"mappings":"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","file":"main.00a118ab.chunk.css","sourcesContent":["@import url(https://css.gg/shape-triangle.css);\n.section,.case,.img-about,.info,.expCard,.divider{position:relative}.img-about .icons-perfil,.divider span,canvas,.bottomCenter{position:absolute}.img-about{text-align:center}.info .description p{text-align:justify}.info .subname p.tag,.divider span{font-style:italic}.img-about .icons-perfil,.divider{width:100%}.menu,.img-about .icons-perfil.show-on-900,.expCard{background-color:rgba(0,0,0,0.8)}*{margin:0;padding:0;outline:0;box-sizing:border-box}*::-webkit-scrollbar{width:0px !important}html{background-color:#000;min-height:100vh}img{max-height:100%;max-width:100%}a{text-decoration:none;color:inherit}@font-face{font-family:\"Boston Bold\";src:url(/static/media/Boston-Bold.acc1816b.otf)}@font-face{font-family:\"Boston Bold It\";src:url(/static/media/Boston-BoldIt.cb6321a8.otf)}@font-face{font-family:\"Boston Light\";src:url(/static/media/Boston-Light.d8512eef.otf)}@font-face{font-family:\"Boston Light It\";src:url(/static/media/Boston-LightIt.1c032bae.otf)}@font-face{font-family:\"Boston Regular\";src:url(/static/media/Boston-Regular.fdb83b25.otf)}@media screen and (max-width: 900px){.hide-on-900{display:none}.show-on-900{display:block}}@media screen and (min-width: 900px){.hide-on-900{display:block}.show-on-900{display:none}}.root{position:relative;height:100vh}.switch-area{position:absolute;right:10px;top:10px;z-index:3}.switch-area .switch-field{margin:5px 10px;display:flex;align-items:center;justify-content:space-between}.switch-area .switch-field i{-webkit-transform:scale(0.8);transform:scale(0.8);margin-left:10px}.menu{padding:5px 10px;border-radius:10px;color:white;list-style-type:none;display:flex;justify-content:center;align-items:center;margin:0 auto}.menu li{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;margin:0 10px;position:relative;padding:5px 10px;border-radius:2px;background-color:rgba(30,30,30,0.4);-webkit-transition:all .2s;transition:all .2s}.menu li::after{-webkit-transition:all .2s;transition:all .2s;content:'';width:0%;display:block;height:1px;border-radius:2px;background-color:lime;opacity:0;margin:auto}.menu li:hover{background-color:rgba(30,30,30,0)}.menu li:hover::after{opacity:.7;width:100%}.section{background-color:#000;height:100%;width:100%;scroll-snap-align:start;-ms-scroll-snap-type:y mandatory;scroll-snap-type:y mandatory;padding:20px}.secPerfil{max-width:1050px;margin:0 auto;display:grid;grid-template-columns:1fr 2fr;grid-gap:100px;gap:100px}.case{-webkit-clip-path:circle(50% at 50% 50%);clip-path:circle(50% at 50% 50%);width:100%;height:auto;max-width:250px;max-height:250px;margin:auto}.img-about{z-index:1;display:flex;flex-direction:column;justify-content:center}.img-about .pic{-webkit-transition:all .8s ease;transition:all .8s ease}.img-about .icons-perfil{height:100%;top:100%;left:0;-webkit-transition:all 0.3s cubic-bezier(0.63, 0.41, 0, 1.02);transition:all 0.3s cubic-bezier(0.63, 0.41, 0, 1.02);-webkit-transition-delay:.5s;transition-delay:.5s}.img-about .icons-perfil a{display:inline-block;margin:0px 10px}.img-about .icons-perfil i{font-size:2rem;-webkit-transition:all .2s ease;transition:all .2s ease}.img-about .icons-perfil.hide-on-900 a:nth-of-type(2){-webkit-transform:translateY(30px);transform:translateY(30px)}.img-about .icons-perfil.hide-on-900 a:nth-of-type(3){-webkit-transform:translateY(30px);transform:translateY(30px)}.img-about .icons-perfil.show-on-900{border-radius:5px;padding:10px;margin-top:10px;position:static;position:initial;height:auto;height:initial;z-index:2}.info{display:flex;flex-direction:column;background-color:rgba(0,0,0,0.5);justify-content:center;z-index:1;padding:0px 10px}.info p.title{font-size:2rem;font-family:\"Boston Bold It\";-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.info .subname p{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;font-size:1.4rem;display:inline-block}.info .subname p.tag{float:right}.info .description{margin-top:20px}.info .description p{font-size:1.2rem}.info .description p::first-letter{margin-left:10px}.experience{max-width:1050px;margin:0 auto}.expCard{max-width:700px;width:100%;padding:20px;text-align:left;margin:10px 0}.expCard .data{color:gray}.divider{display:block;background-color:#222;height:80px}.divider span{top:50%;left:50%;-webkit-transform:translate(-50%, -50%);transform:translate(-50%, -50%);display:block;font-size:2rem}@media (max-width: 768px){section{flex-direction:column;padding:10px}.menu{min-width:400px}.menu li{background-color:rgba(30,30,30,0.6)}.icons-perfil i{font-size:1rem}.secPerfil{grid-template-columns:1fr;margin:15px;grid-gap:50px;gap:50px}.bottomCenter{bottom:70px !important}.route-wrapper{height:calc(100% - 100px) !important}}@media (min-width: 768px){.case:hover .icons-perfil.hide-on-900{top:calc(65%)}.case:hover .pic{-webkit-filter:brightness(30%) saturate(50%) grayscale(100%) blur(1px);filter:brightness(30%) saturate(50%) grayscale(100%) blur(1px)}}html{color:#eee;font-family:\"Boston Regular\"}canvas{top:0;left:0;z-index:0}.route-wrapper{position:relative;margin:auto;z-index:1;height:calc(100% - 40px);width:100%;overflow:scroll;display:flex;flex-direction:row;justify-content:center}.route-wrapper>div{display:flex}.bottomCenter{bottom:20px;z-index:1;left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%)}.iconBrazil{width:20px;height:20px}\n\n","%u-relative {\r\n  position: relative;\r\n}\r\n%u-absolute {\r\n  position: absolute;\r\n}\r\n%u-text-center {\r\n  text-align: center;\r\n}\r\n%u-text-justify {\r\n  text-align: justify;\r\n}\r\n%u-italic {\r\n  font-style: italic;\r\n}\r\n%u-full-w {\r\n  width: 100%;\r\n}\r\n%u-b50-background{\r\n  background-color: rgba(0,0,0,.8)\r\n}\r\n","*{margin: 0;padding: 0;outline: 0;box-sizing:border-box;\r\n    &::-webkit-scrollbar{width: 0px !important}}\r\nhtml{\r\n    background-color: #000;\r\n    min-height: 100vh;\r\n}\r\nimg{max-height: 100%;max-width: 100%;}\r\na{text-decoration: none;color: inherit;}\r\n\r\n@import './font';\r\n@media screen and ( max-width: 900px ){\r\n    .hide-on-900{\r\n        display: none;\r\n    }\r\n    .show-on-900{\r\n        display: block;\r\n    }\r\n}\r\n\r\n@media screen and ( min-width: 900px ){\r\n    .hide-on-900{\r\n        display: block;\r\n    }\r\n    .show-on-900{\r\n        display: none;\r\n    }\r\n}","@font-face {\n    font-family: \"Boston Bold\";\n    src: url(\"./font/Boston-Bold.otf\"); }\n@font-face {\n    font-family: \"Boston Bold It\";\n    src: url(\"./font/Boston-BoldIt.otf\"); }\n@font-face {\n    font-family: \"Boston Light\";\n    src: url(\"./font/Boston-Light.otf\"); }\n@font-face {\n    font-family: \"Boston Light It\";\n    src: url(\"./font/Boston-LightIt.otf\"); }\n@font-face {\n    font-family: \"Boston Regular\";\n    src: url(\"./font/Boston-Regular.otf\"); }\n","@import url('https://css.gg/shape-triangle.css');\n.root {\n    position: relative;\n    height: 100vh; }\n.switch-area {\n    position: absolute;\n    right: 10px;\n    top: 10px;\n    z-index: 3;\n\n    .switch-field {\n        margin: 5px 10px;\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        i {\n            transform: scale(.8);\n            margin-left: 10px; } } }\n",".menu {\n    @extend %u-b50-background;\n    padding: 5px 10px;\n    border-radius: 10px;\n    color: white;\n    list-style-type: none;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: 0 auto;\n\n    li {\n        // border-bottom: 2px solid lime\n        user-select: none;\n        cursor: pointer;\n        margin: 0 10px;\n        position: relative;\n        padding: 5px 10px;\n        border-radius: 2px;\n        background-color: rgba(30,30,30,.4);\n        transition: all .2s;\n        &::after {\n            transition: all .2s;\n            content: '';\n            width: 0%;\n            display: block;\n            height: 1px;\n            border-radius: 2px;\n            background-color: lime;\n            opacity: 0;\n            margin: auto; }\n        &:hover {\n            background-color: rgba(30,30,30,0);\n            &::after {\n                opacity: .7;\n                width: 100%; } } } }\n\n",".section {\n    @extend %u-relative;\n    background-color: map-get($colors, background);\n    height: 100%;\n    width: 100%;\n    scroll-snap-align: start;\n    scroll-snap-type: y mandatory;\n    padding: 20px; }\n",".secPerfil {\n    max-width: 1050px;\n    margin: 0 auto;\n\n    display: grid;\n    grid-template-columns: 1fr 2fr;\n    gap: 100px; }\n\n\n",".case {\n    @extend %u-relative;\n    clip-path: circle(50% at 50% 50%);\n    width: 100%;\n    height: auto;\n    max-width: 250px;\n    max-height: 250px;\n    margin: auto; }\n\n.img-about {\n    @extend  %u-relative, %u-text-center;\n    z-index: 1;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    .pic {\n        transition: all .8s ease; }\n\n    .icons-perfil {\n        @extend %u-absolute,%u-full-w;\n        height: 100%;\n        top: 100%;\n        left: 0;\n        transition: all .3s cubic-bezier(.63,.41,0,1.02);\n        transition-delay: .5s;\n        a {\n            display: inline-block;\n            margin: 0px 10px; }\n\n        i {\n            font-size: 2rem;\n            transition: all .2s ease; }\n        &.hide-on-900 {\n            a {\n                &:nth-of-type(2) {\n                    transform: translateY(30px); }\n                &:nth-of-type(3) {\n                    transform: translateY(30px); } } }\n        &.show-on-900 {\n            @extend %u-b50-background;\n            border-radius: 5px;\n            padding: 10px;\n            margin-top: 10px;\n            position: initial;\n            height: initial;\n            // margin-top: 20px\n            z-index: 2; } } }\n\n",".info {\n    @extend %u-relative;\n    display: flex;\n    flex-direction: column;\n    background-color: rgba(0,0,0,.5);\n    justify-content: center;\n    z-index: 1;\n    padding: 0px 10px;\n    p.title {\n        font-size: 2rem;\n        font-family: map-get($fonts, title);\n        user-select: none; }\n    .subname {\n        p {\n            user-select: none;\n            font-size: 1.4rem;\n            display: inline-block;\n            &.tag {\n                @extend %u-italic;\n                float: right; } } }\n    .description {\n        margin-top: 20px;\n        p {\n            @extend %u-text-justify;\n            font-size: 1.2rem;\n            &::first-letter {\n               margin-left: 10px; } } } }\n","$colors: (accent: #00ff00, background: #000, letter: #eee);\n$fonts: (default: 'Boston Regular', accent: 'Boston Light It', title: 'Boston Bold It');\n\n@import './style/include-media';\n@import './style/utilities';\n@import './style/base';\n@import './style/mixins';\n@import './style/root';\n@import './style/c-menu';\n@import './style/c-section';\n@import './style/c-secPerfil';\n@import './style/c-img-about';\n@import './style/c-info';\n@import './style/c-expCard';\n@import './style/c-divider';\n@import './style/responsivity';\n\n\nhtml {\n    color: map-get($colors, letter);\n    font-family: map-get($fonts, default); }\n\ncanvas {\n    @extend %u-absolute;\n    top: 0;\n    left: 0;\n    z-index: 0; }\n\n.route-wrapper {\n    position: relative;\n    margin: auto;\n    z-index: 1;\n    height: calc(100% - 40px);\n    width: 100%;\n    overflow: scroll;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    & > div {\n        display: flex; } }\n\n.bottomCenter {\n    @extend %u-absolute;\n    bottom: 20px;\n    z-index: 1;\n    left: 50%;\n    transform: translateX(-50%); }\n\n.iconBrazil {\n    width: 20px;\n    height: 20px; }\n",".experience {\n    max-width: 1050px;\n    margin: 0 auto; }\n\n.expCard {\n    @extend %u-relative,%u-b50-background;\n    max-width: 700px;\n    width: 100%;\n    padding: 20px;\n    text-align: left;\n    margin: 10px 0;\n    .data {\n        color: gray; } }\n",".divider {\n    @extend %u-relative,%u-full-w;\n    display: block;\n    background-color: #222;\n    height: 80px; }\n.divider span {\n    @include centered();\n    @extend %u-italic;\n    display: block;\n    font-size: 2rem; }\n","@mixin centered(){\r\n    @extend %u-absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%,-50%)\r\n}","@charset \"UTF-8\";\r\n\r\n//     _            _           _                           _ _\r\n//    (_)          | |         | |                         | (_)\r\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\r\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\r\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\r\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\r\n//\r\n//      Simple, elegant and maintainable media queries in Sass\r\n//                        v1.4.9\r\n//\r\n//        https://eduardoboucas.github.io/include-media\r\n//\r\n//         Authors: Eduardo Boucas (@eduardoboucas)\r\n//                  Hugo Giraudel (@hugogiraudel)\r\n//\r\n//      This project is licensed under the terms of the MIT license\r\n////\r\n/// include-media library public configuration\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n\r\n///\r\n/// Creates a list of global breakpoints\r\n///\r\n/// @example scss - Creates a single breakpoint with the label `phone`\r\n///  $breakpoints: ('phone': 320px);\r\n///\r\n$breakpoints: (\r\n  'phone': 320px,\r\n  'tablet': 768px,\r\n  'desktop': 1024px\r\n) !default;\r\n\r\n\r\n///\r\n/// Creates a list of static expressions or media types\r\n///\r\n/// @example scss - Creates a single media type (screen)\r\n///  $media-expressions: ('screen': 'screen');\r\n///\r\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\r\n///  $media-expressions: (\r\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\r\n///  );\r\n///\r\n$media-expressions: (\r\n  'screen': 'screen',\r\n  'print': 'print',\r\n  'handheld': 'handheld',\r\n  'landscape': '(orientation: landscape)',\r\n  'portrait': '(orientation: portrait)',\r\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\r\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\r\n) !default;\r\n\r\n\r\n///\r\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\r\n///\r\n/// @example scss - Interval for pixels is defined as `1` by default\r\n///  @include media('>128px') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 129px) {}\r\n///\r\n/// @example scss - Interval for ems is defined as `0.01` by default\r\n///  @include media('>20em') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 20.01em) {}\r\n///\r\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\r\n///  @include media('>2.0rem') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 2.1rem) {}\r\n///\r\n$unit-intervals: (\r\n  'px': 1,\r\n  'em': 0.01,\r\n  'rem': 0.1,\r\n  '': 0\r\n) !default;\r\n\r\n///\r\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\r\n/// for browsers that don't support media queries.\r\n///\r\n/// @example scss - Disables support for media queries\r\n///  $im-media-support: false;\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n$im-media-support: true !default;\r\n\r\n///\r\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\r\n/// intercept the breakpoint will be displayed, any others will be ignored.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'tablet';\r\n///  @include media('>=desktop') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-breakpoint: 'desktop' !default;\r\n\r\n///\r\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\r\n/// are not supported.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'screen') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///   /* Generates: */\r\n///   .foo {\r\n///     color: tomato;\r\n///   }\r\n///\r\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'retina2x') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\r\n\r\n////\r\n/// Cross-engine logging engine\r\n/// @author Hugo Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Log a message either with `@error` if supported\r\n/// else with `@warn`, using `feature-exists('at-error')`\r\n/// to detect support.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@function im-log($message) {\r\n  @if feature-exists('at-error') {\r\n    @error $message;\r\n  } @else {\r\n    @warn $message;\r\n    $_: noop();\r\n  }\r\n\r\n  @return $message;\r\n}\r\n\r\n\r\n///\r\n/// Wrapper mixin for the log function so it can be used with a more friendly\r\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\r\n/// within functions because it is not possible to include a mixin in a function\r\n/// and use the mixin everywhere else because it's much more elegant.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@mixin log($message) {\r\n  @if im-log($message) {}\r\n}\r\n\r\n\r\n///\r\n/// Function with no `@return` called next to `@warn` in Sass 3.3\r\n/// to trigger a compiling error and stop the process.\r\n///\r\n@function noop() {}\r\n\r\n///\r\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\r\n///\r\n@function im-intercepts-static-breakpoint($conditions...) {\r\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\r\n\r\n  @if not $no-media-breakpoint-value {\r\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\r\n  }\r\n\r\n  @each $condition in $conditions {\r\n    @if not map-has-key($media-expressions, $condition) {\r\n      $operator: get-expression-operator($condition);\r\n      $prefix: get-expression-prefix($operator);\r\n      $value: get-expression-value($condition, $operator);\r\n\r\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\r\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\r\n        @return false;\r\n      }\r\n    } @else if not index($im-no-media-expressions, $condition) {\r\n      @return false;\r\n    }\r\n  }\r\n\r\n  @return true;\r\n}\r\n\r\n////\r\n/// Parsing engine\r\n/// @author Hugo Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Get operator of an expression\r\n///\r\n/// @param {String} $expression - Expression to extract operator from\r\n///\r\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\r\n///\r\n@function get-expression-operator($expression) {\r\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\r\n    @if str-index($expression, $operator) {\r\n      @return $operator;\r\n    }\r\n  }\r\n\r\n  // It is not possible to include a mixin inside a function, so we have to\r\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n  // functions cannot be called anywhere in Sass, we need to hack the call in\r\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n  $_: im-log('No operator found in `#{$expression}`.');\r\n}\r\n\r\n\r\n///\r\n/// Get dimension of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract dimension from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {String} - `width` or `height` (or potentially anything else)\r\n///\r\n@function get-expression-dimension($expression, $operator) {\r\n  $operator-index: str-index($expression, $operator);\r\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\r\n  $dimension: 'width';\r\n\r\n  @if str-length($parsed-dimension) > 0 {\r\n    $dimension: $parsed-dimension;\r\n  }\r\n\r\n  @return $dimension;\r\n}\r\n\r\n\r\n///\r\n/// Get dimension prefix based on an operator\r\n///\r\n/// @param {String} $operator - Operator\r\n///\r\n/// @return {String} - `min` or `max`\r\n///\r\n@function get-expression-prefix($operator) {\r\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\r\n}\r\n\r\n\r\n///\r\n/// Get value of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract value from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {Number} - A numeric value\r\n///\r\n@function get-expression-value($expression, $operator) {\r\n  $operator-index: str-index($expression, $operator);\r\n  $value: str-slice($expression, $operator-index + str-length($operator));\r\n\r\n  @if map-has-key($breakpoints, $value) {\r\n    $value: map-get($breakpoints, $value);\r\n  } @else {\r\n    $value: to-number($value);\r\n  }\r\n\r\n  $interval: map-get($unit-intervals, unit($value));\r\n\r\n  @if not $interval {\r\n    // It is not possible to include a mixin inside a function, so we have to\r\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n    // functions cannot be called anywhere in Sass, we need to hack the call in\r\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n    $_: im-log('Unknown unit `#{unit($value)}`.');\r\n  }\r\n\r\n  @if $operator == '>' {\r\n    $value: $value + $interval;\r\n  } @else if $operator == '<' {\r\n    $value: $value - $interval;\r\n  }\r\n\r\n  @return $value;\r\n}\r\n\r\n\r\n///\r\n/// Parse an expression to return a valid media-query expression\r\n///\r\n/// @param {String} $expression - Expression to parse\r\n///\r\n/// @return {String} - Valid media query\r\n///\r\n@function parse-expression($expression) {\r\n  // If it is part of $media-expressions, it has no operator\r\n  // then there is no need to go any further, just return the value\r\n  @if map-has-key($media-expressions, $expression) {\r\n    @return map-get($media-expressions, $expression);\r\n  }\r\n\r\n  $operator: get-expression-operator($expression);\r\n  $dimension: get-expression-dimension($expression, $operator);\r\n  $prefix: get-expression-prefix($operator);\r\n  $value: get-expression-value($expression, $operator);\r\n\r\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\r\n}\r\n\r\n///\r\n/// Slice `$list` between `$start` and `$end` indexes\r\n///\r\n/// @access private\r\n///\r\n/// @param {List} $list - List to slice\r\n/// @param {Number} $start [1] - Start index\r\n/// @param {Number} $end [length($list)] - End index\r\n///\r\n/// @return {List} Sliced list\r\n///\r\n@function slice($list, $start: 1, $end: length($list)) {\r\n  @if length($list) < 1 or $start > $end {\r\n    @return ();\r\n  }\r\n\r\n  $result: ();\r\n\r\n  @for $i from $start through $end {\r\n    $result: append($result, nth($list, $i));\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n////\r\n/// String to number converter\r\n/// @author Hugo Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Casts a string into a number\r\n///\r\n/// @param {String | Number} $value - Value to be parsed\r\n///\r\n/// @return {Number}\r\n///\r\n@function to-number($value) {\r\n  @if type-of($value) == 'number' {\r\n    @return $value;\r\n  } @else if type-of($value) != 'string' {\r\n    $_: im-log('Value for `to-number` should be a number or a string.');\r\n  }\r\n\r\n  $first-character: str-slice($value, 1, 1);\r\n  $result: 0;\r\n  $digits: 0;\r\n  $minus: ($first-character == '-');\r\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\r\n\r\n  // Remove +/- sign if present at first character\r\n  @if ($first-character == '+' or $first-character == '-') {\r\n    $value: str-slice($value, 2);\r\n  }\r\n\r\n  @for $i from 1 through str-length($value) {\r\n    $character: str-slice($value, $i, $i);\r\n\r\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\r\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\r\n    }\r\n\r\n    @if $character == '.' {\r\n      $digits: 1;\r\n    } @else if $digits == 0 {\r\n      $result: $result * 10 + map-get($numbers, $character);\r\n    } @else {\r\n      $digits: $digits * 10;\r\n      $result: $result + map-get($numbers, $character) / $digits;\r\n    }\r\n  }\r\n\r\n  @return if($minus, -$result, $result);\r\n}\r\n\r\n\r\n///\r\n/// Add `$unit` to `$value`\r\n///\r\n/// @param {Number} $value - Value to add unit to\r\n/// @param {String} $unit - String representation of the unit\r\n///\r\n/// @return {Number} - `$value` expressed in `$unit`\r\n///\r\n@function to-length($value, $unit) {\r\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\r\n\r\n  @if not index(map-keys($units), $unit) {\r\n    $_: im-log('Invalid unit `#{$unit}`.');\r\n  }\r\n\r\n  @return $value * map-get($units, $unit);\r\n}\r\n\r\n///\r\n/// This mixin aims at redefining the configuration just for the scope of\r\n/// the call. It is helpful when having a component needing an extended\r\n/// configuration such as custom breakpoints (referred to as tweakpoints)\r\n/// for instance.\r\n///\r\n/// @author Hugo Giraudel\r\n///\r\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\r\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\r\n///\r\n/// @example scss - Extend the global breakpoints with a tweakpoint\r\n///  @include media-context(('custom': 678px)) {\r\n///    .foo {\r\n///      @include media('>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend the global media expressions with a custom one\r\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend both configuration maps\r\n///  @include media-context(('custom': 678px), ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\r\n  // Save global configuration\r\n  $global-breakpoints: $breakpoints;\r\n  $global-media-expressions: $media-expressions;\r\n\r\n  // Update global configuration\r\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\r\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\r\n\r\n  @content;\r\n\r\n  // Restore global configuration\r\n  $breakpoints: $global-breakpoints !global;\r\n  $media-expressions: $global-media-expressions !global;\r\n}\r\n\r\n////\r\n/// include-media public exposed API\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n\r\n///\r\n/// Generates a media query based on a list of conditions\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @example scss - With a single set breakpoint\r\n///  @include media('>phone') { }\r\n///\r\n/// @example scss - With two set breakpoints\r\n///  @include media('>phone', '<=tablet') { }\r\n///\r\n/// @example scss - With custom values\r\n///  @include media('>=358px', '<850px') { }\r\n///\r\n/// @example scss - With set breakpoints with custom values\r\n///  @include media('>desktop', '<=1350px') { }\r\n///\r\n/// @example scss - With a static expression\r\n///  @include media('retina2x') { }\r\n///\r\n/// @example scss - Mixing everything\r\n///  @include media('>=350px', '<tablet', 'retina3x') { }\r\n///\r\n@mixin media($conditions...) {\r\n  @if ($im-media-support and length($conditions) == 0) or\r\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\r\n    @content;\r\n  } @else if ($im-media-support and length($conditions) > 0) {\r\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\r\n      // Recursive call\r\n      @include media(slice($conditions, 2)...) {\r\n        @content;\r\n      }\r\n    }\r\n  }\r\n}","@include media(\"<=tablet\") {\n    section {\n        flex-direction: column;\n        padding: 10px; }\n    .menu {\n        min-width: 400px;\n        li {\n            background-color: rgba(30,30,30,.6); } }\n    .icons-perfil {\n        i {\n            font-size: 1rem; } }\n    .secPerfil {\n        grid-template-columns: 1fr;\n        margin: 15px;\n        gap: 50px; }\n    .bottomCenter {\n        bottom: 70px !important; }\n    .route-wrapper {\n        height: calc(100% - 100px) !important; } }\n@include media(\">=tablet\") {\n    .case:hover {\n        .icons-perfil.hide-on-900 {\n            top: calc(65%); }\n        .pic {\n            filter: brightness(30%) saturate(50%) grayscale(100%) blur(1px); } } }\n"]}